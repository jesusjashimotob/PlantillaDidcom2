# Workflow: Diagnóstico Completo de Petición a Jira
name: Diagnóstico Completo de Petición a Jira

on:
  issues:
    types: [opened]

jobs:
  diagnose-jira-request:
    runs-on: ubuntu-latest

    steps:
      # Verificar configuración de secrets y variables
      - name: Verificar configuración de secrets
        run: |
          if [[ -z "${{ secrets.JIRA_USERNAME }}" || -z "${{ secrets.JIRA_API_TOKEN }}" || -z "${{ secrets.JIRA_URL }}" ]]; then
            echo "Error: Faltan configuraciones en los secrets (JIRA_USERNAME, JIRA_API_TOKEN, JIRA_URL)."
            exit 1
          fi
          echo "Secrets configurados correctamente."
          echo "JIRA_USERNAME: ${#secrets.JIRA_USERNAME} caracteres (enmascarado)"
          echo "JIRA_API_TOKEN: ${#secrets.JIRA_API_TOKEN} caracteres (enmascarado)"
          echo "JIRA_URL: ${{ secrets.JIRA_URL }}"

      # Generar y mostrar todos los parámetros de la petición
      - name: Generar y mostrar detalles de la petición
        run: |
          echo "Generando diagnóstico de la petición a Jira..."

          # Fecha de vencimiento
          due_date=$(date -d "+1 month" "+%Y-%m-%d")

          # Crear el payload
          task_payload=$(cat <<EOF
          {
            "fields": {
              "project": {
                "key": "CDP"
              },
              "summary": "${{ github.event.issue.title }}",
              "issuetype": {
                "name": "Task"
              },
              "components": [
                {
                  "name": "Firmware"
                },
                {
                  "name": "Sin Asignar"
                }
              ],
              "duedate": "$due_date"
            }
          }
          EOF
          )

          # Construir los headers
          auth_header=$(echo -n "${{ secrets.JIRA_USERNAME }}:${{ secrets.JIRA_API_TOKEN }}" | base64)

          # Mostrar los detalles de la petición
          echo "=== Detalles de la petición ==="
          echo "Tipo de petición: POST"
          echo "URL: ${{ secrets.JIRA_URL }}/rest/api/3/issue"
          echo "Headers:"
          echo "  Authorization: Basic $auth_header (enmascarado)"
          echo "  Content-Type: application/json"
          echo "Body del JSON:"
          echo "$task_payload"

      # Realizar la petición y mostrar la respuesta
      - name: Realizar y diagnosticar la petición a Jira
        run: |
          echo "Realizando petición real a Jira..."

          # Ejecutar la petición
          jira_response=$(curl -v -s -X POST \
            -H "Authorization: Basic $(echo -n ${{ secrets.JIRA_USERNAME }}:${{ secrets.JIRA_API_TOKEN }} | base64)" \
            -H "Content-Type: application/json" \
            -d "$task_payload" \
            ${{ secrets.JIRA_URL }}/rest/api/3/issue 2>&1)

          # Mostrar la respuesta completa
          echo "=== Respuesta completa de Jira ==="
          echo "$jira_response"

          # Extraer la key
          jira_key=$(echo "$jira_response" | jq -r '.key')
          if [[ -z "$jira_key" || "$jira_key" == "null" ]]; then
            echo "Error: No se pudo crear la tarea en Jira. Revisa los logs."
            exit 1
          fi

          echo "Historia creada con éxito. Key de Jira: $jira_key"
